import React, { useState, useEffect, useMemo, memo } from 'react';
import { 
  Box, 
  Typography, 
  Chip,
  Paper,
  IconButton,
  Menu,
  MenuItem,
  Divider,
  Button,
  Tooltip,
  Stack,
  LinearProgress,
  Card,
  CardContent,
  useTheme,
  alpha,
  Badge,
  Avatar,
  Fade,
  CircularProgress,
  Skeleton,
  useMediaQuery,
  Collapse,
  Alert,
  Tabs,
  Tab,
  Grid,
} from '@mui/material';
import {
  FilterList as FilterListIcon,
  MoreVert as MoreVertIcon,
  Assignment as AssignmentIcon,
  CheckCircle as CheckCircleIcon,
  Cancel as CancelIcon,
  Visibility as VisibilityIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  CompareArrows as CompareIcon,
  Timer as TimerIcon,
  Add as AddIcon,
  Search as SearchIcon,
  Refresh as RefreshIcon,
  FilterAlt as FilterAltIcon,
  Clear as ClearIcon,
  ArrowDropDown as ArrowDropDownIcon,
  FileDownload as ExportIcon,
} from '@mui/icons-material';
import { useRouter } from 'next/router';
import { useAuth, UserRole } from '@/context/AuthContext';
import Search from '@/components/common/Search';
import Table, { Column } from '@/components/common/Table';
import { mockRecords, DataRecord, RecordStatus, ConfidenceLevel } from '@/mock-data/records';
import { format } from 'date-fns';
import Modal from '@/components/common/Modal';
import { useNotification, NotificationType } from '@/context/NotificationContext';

// Memoized filter chip component for better performance
const FilterChip = memo(({ label, onDelete }: { label: string; onDelete: () => void }) => (
  <Chip 
    label={label} 
    onDelete={onDelete} 
    size="small" 
    sx={{ 
      borderRadius: '4px',
      bgcolor: (theme) => alpha(theme.palette.primary.main, 0.1),
      color: 'primary.main',
      '& .MuiChip-deleteIcon': {
        color: 'primary.main',
        '&:hover': {
          color: 'primary.dark',
        },
      },
    }} 
  />
));

FilterChip.displayName = 'FilterChip';

// Memoized action button component for better performance
const ActionButton = memo(({ icon, label, onClick, disabled = false }: { 
  icon: React.ReactNode; 
  label: string; 
  onClick: (event: React.MouseEvent<HTMLElement>) => void; 
  disabled?: boolean;
}) => (
  <Tooltip title={label}>
    <IconButton
      onClick={onClick}
      color="primary"
      disabled={disabled}
      sx={{ 
        bgcolor: (theme) => alpha(theme.palette.primary.main, 0.1),
        '&:hover': {
          bgcolor: (theme) => alpha(theme.palette.primary.main, 0.2),
        }
      }}
    >
      {icon}
    </IconButton>
  </Tooltip>
));

ActionButton.displayName = 'ActionButton';

const RecordsList: React.FC = () => {
  const [records, setRecords] = useState<DataRecord[]>([]);
  const [filteredRecords, setFilteredRecords] = useState<DataRecord[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchHistory, setSearchHistory] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [page, setPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [selectedRecords, setSelectedRecords] = useState<string[]>([]);
  const [filters, setFilters] = useState<{ label: string; value: string }[]>([]);
  const [filterAnchorEl, setFilterAnchorEl] = useState<null | HTMLElement>(null);
  const [actionAnchorEl, setActionAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedRecord, setSelectedRecord] = useState<DataRecord | null>(null);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [activeTab, setActiveTab] = useState(0);
  const [showFiltersPanel, setShowFiltersPanel] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  
  const router = useRouter();
  const { addNotification } = useNotification();
  const { user } = useAuth();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isTablet = useMediaQuery(theme.breakpoints.down('md'));
  
  // Handle data refresh with visual feedback
  const handleRefreshData = () => {
    setRefreshing(true);
    setIsLoading(true);
    
    // Simulate API call delay
    setTimeout(() => {
      setRecords(mockRecords);
      setFilteredRecords(mockRecords);
      setIsLoading(false);
      setRefreshing(false);
      
      addNotification({
        type: NotificationType.SUCCESS,
        title: 'Data Refreshed',
        message: 'Records have been refreshed successfully.',
      });
    }, 800);
  };
  
  // Load initial data
  useEffect(() => {
    // Initialize data
    setIsLoading(true);
    
    // Simulate API call delay
    const timer = setTimeout(() => {
      setRecords(mockRecords);
      setFilteredRecords(mockRecords);
      setIsLoading(false);
    }, 800);
    
    return () => clearTimeout(timer);
  }, []);
  
  useEffect(() => {
    // Check if there's a status filter in the URL and apply it
    const { status } = router.query;
    if (status && typeof status === 'string') {
      handleAddFilter('status', status);
    }
  }, [router.query]);
  
  // Apply search and filters to records
  useEffect(() => {
    if (records.length === 0) return;
    
    let result = [...records];
    
    // Apply search query
    if (searchQuery) {
      result = result.filter(record => 
        record.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        record.sourceData.customerName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        record.sourceData.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
        record.id.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }
    
    // Apply filters
    filters.forEach(filter => {
      if (filter.label === 'status') {
        result = result.filter(record => record.status === filter.value);
      } else if (filter.label === 'confidence') {
        result = result.filter(record => record.aiConfidence.overall === filter.value);
      } else if (filter.label === 'dynproApproved') {
        result = result.filter(record => 
          (filter.value === 'true' && record.dynproApproved) || 
          (filter.value === 'false' && !record.dynproApproved)
        );
      } else if (filter.label === 'dateRange') {
        const [startDate, endDate] = filter.value.split('to').map(date => new Date(date.trim()));
        result = result.filter(record => {
          const recordDate = new Date(record.createdAt);
          return recordDate >= startDate && recordDate <= endDate;
        });
      }
    });
    
    setFilteredRecords(result);
  }, [records, searchQuery, filters]);
  
  // Define columns based on user role
  const columns = useMemo(() => {
    // Base columns that will always be shown
    const baseColumns: Column<DataRecord>[] = [
    {
      id: 'name',
      label: 'Record Name',
      minWidth: 180,
      format: (value, row) => {
        let iconColor;
        switch (row.status) {
          case RecordStatus.PENDING:
            iconColor = theme.palette.warning.main;
            break;
          case RecordStatus.APPROVED:
            iconColor = theme.palette.success.main;
            break;
          case RecordStatus.REJECTED:
            iconColor = theme.palette.error.main;
            break;
          default:
            iconColor = theme.palette.primary.main;
        }
        
        return (
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Avatar
              sx={{
                width: 32,
                height: 32,
                mr: 1.5,
                bgcolor: alpha(iconColor, 0.1),
                color: iconColor,
              }}
            >
              <AssignmentIcon fontSize="small" />
            </Avatar>
            <Box>
              <Typography 
                variant="body2" 
                fontWeight="medium"
                sx={{ 
                  display: 'block',
                  color: theme.palette.text.primary,
                  '&:hover': { color: theme.palette.primary.main }
                }}
              >
                {value}
              </Typography>
              <Typography 
                variant="caption" 
                color="text.secondary"
                sx={{ display: 'block' }}
              >
                ID: {row.id.substring(0, 8)}...
              </Typography>
            </Box>
          </Box>
        );
      },
      {
        id: 'status',
        label: 'Status',
        minWidth: 120,
        format: (value) => {
          if (!value) return '';
          
          type StatusConfigType = {
            [key: string]: {
              color: string;
              bgColor: string;
              icon: React.ReactNode;
              label: string;
            }
          };
          
          const statusConfig: StatusConfigType = {
            [RecordStatus.APPROVED]: {
              color: theme.palette.success.main,
              bgColor: alpha(theme.palette.success.main, 0.1),
              icon: <CheckCircleIcon fontSize="small" />,
              label: 'Approved'
            },
            [RecordStatus.REJECTED]: {
              color: theme.palette.error.main,
              bgColor: alpha(theme.palette.error.main, 0.1),
              icon: <CancelIcon fontSize="small" />,
              label: 'Rejected'
            },
            [RecordStatus.PENDING]: {
              color: theme.palette.warning.main,
              bgColor: alpha(theme.palette.warning.main, 0.1),
              icon: <TimerIcon fontSize="small" />,
              label: 'Pending'
            }
          };
          
          const config = statusConfig[value] || { 
            color: theme.palette.grey[500], 
            bgColor: alpha(theme.palette.grey[500], 0.1),
            label: value, 
            icon: null 
          };
          
          return (
            <Box 
              sx={{ 
                display: 'flex',
                alignItems: 'center',
                gap: 0.5,
                bgcolor: config.bgColor,
                color: config.color,
                borderRadius: '16px',
                px: 1.5,
                py: 0.5,
                minWidth: '100px',
                justifyContent: 'center',
                transition: 'all 0.2s ease-in-out',
                '&:hover': {
                  boxShadow: `0 0 0 1px ${config.color}`,
                }
              }}
            >
              {config.icon}
              <Typography 
                variant="caption" 
                fontWeight="medium"
                sx={{ color: 'inherit' }}
              >
                {config.label}
              </Typography>
            </Box>
          );
        },
      },
      {
        id: 'customerName',
        label: 'Customer',
        minWidth: 170,
        format: (value, row) => row.sourceData.customerName,
      },
      {
        id: 'customerEmail',
        label: 'Email',
        minWidth: 200,
        format: (value, row) => row.sourceData.email,
      },
      {
        id: 'aiConfidence',
        label: 'AI Confidence',
        minWidth: 150,
        format: (value) => {
          const confidence = value.overall;
          let color, bgColor, icon;
          
          switch (confidence) {
            case ConfidenceLevel.HIGH:
              color = theme.palette.success.main;
              bgColor = alpha(theme.palette.success.main, 0.1);
              icon = <CheckCircleIcon fontSize="small" />;
              break;
            case ConfidenceLevel.MEDIUM:
              color = theme.palette.warning.main;
              bgColor = alpha(theme.palette.warning.main, 0.1);
              icon = <TimerIcon fontSize="small" />;
              break;
            case ConfidenceLevel.LOW:
              color = theme.palette.error.main;
              bgColor = alpha(theme.palette.error.main, 0.1);
              icon = <CancelIcon fontSize="small" />;
              break;
            default:
              color = theme.palette.grey[500];
              bgColor = alpha(theme.palette.grey[500], 0.1);
              icon = null;
          }
          
          const label = confidence.charAt(0).toUpperCase() + confidence.slice(1);
          
          return (
            <Box 
              sx={{ 
                display: 'flex',
                alignItems: 'center',
                gap: 0.5,
                bgcolor: bgColor,
                color: color,
                borderRadius: '16px',
                px: 1.5,
                py: 0.5,
                minWidth: '80px',
                justifyContent: 'center',
                transition: 'all 0.2s ease-in-out',
                '&:hover': {
                  boxShadow: `0 0 0 1px ${color}`,
                }
              }}
            >
              {icon}
              <Typography 
                variant="caption" 
                fontWeight="medium"
                sx={{ color: 'inherit' }}
              >
                {label}
              </Typography>
            </Box>
          );
        },
      },

      {
        id: 'createdAt',
        label: 'Created Date',
        minWidth: 170,
        format: (value) => format(new Date(value), 'MMM dd, yyyy HH:mm'),
      },
    ];
    
    // Only add the Dynpro Approved column if user is not a Data Steward
    if (!user || user.role !== UserRole.DATA_STEWARD) {
      baseColumns.splice(baseColumns.length - 1, 0, {
        id: 'dynproApproved',
        label: 'Dynpro Approved',
        minWidth: 150,
        format: (value) => {
          const color = value ? theme.palette.success.main : theme.palette.grey[500];
          const bgColor = value ? alpha(theme.palette.success.main, 0.1) : alpha(theme.palette.grey[500], 0.1);
          const icon = value ? <CheckCircleIcon fontSize="small" /> : <CancelIcon fontSize="small" />;
          const label = value ? 'Yes' : 'No';
          
          return (
            <Box 
              sx={{ 
                display: 'flex',
                alignItems: 'center',
                gap: 0.5,
                bgcolor: bgColor,
                color: color,
                borderRadius: '16px',
                px: 1.5,
                py: 0.5,
                minWidth: '70px',
                justifyContent: 'center',
                transition: 'all 0.2s ease-in-out',
                '&:hover': {
                  boxShadow: `0 0 0 1px ${color}`,
                }
              }}
            >
              {icon}
              <Typography 
                variant="caption" 
                fontWeight="medium"
                sx={{ color: 'inherit' }}
              >
                {label}
              </Typography>
            </Box>
          );
        },
      });
    }
    
    return baseColumns;
  }, [theme, user]);
  
  // Handle page change
  const handlePageChange = (_event: React.ChangeEvent<unknown>, newPage: number) => {
    setPage(newPage);
  };
  
  // Handle rows per page change
  const handleRowsPerPageChange = (newRowsPerPage: number) => {
    setRowsPerPage(newRowsPerPage);
    setPage(1);
  };
  
  // Handle search query change
  const handleSearchChange = (value: string) => {
    setSearchQuery(value);
  };
  
  // Handle search submission
  const handleSearch = (value: string) => {
    if (value && !searchHistory.includes(value)) {
      setSearchHistory([value, ...searchHistory.slice(0, 9)]);
    }
  };
  
  // Handle clearing search history
  const handleClearSearchHistory = () => {
    setSearchHistory([]);
  };
  
  // Handle saving a search query
  const handleSaveSearch = (search: string) => {
    // In a real app, this would save to user preferences or backend
    addNotification({
      type: NotificationType.SUCCESS,
      title: 'Search Saved',
      message: `Search "${search}" has been saved to your preferences.`,
    });
  };
  
  // Handle row selection
    <Box>
      <Typography variant="h5" fontWeight="bold" gutterBottom>
        Records Management
      </Typography>
      <Typography variant="body2" color="text.secondary">
        View, filter, edit and manage all data records
      </Typography>
    </Box>
    
    <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', justifyContent: { xs: 'flex-start', sm: 'flex-end' }, width: { xs: '100%', md: 'auto' } }}>
      <Button
        variant="contained"
        color="primary"
        startIcon={<AddIcon />}
        onClick={() => router.push('/records/new')}
        sx={{ minWidth: 120 }}
      >
        New Record
      </Button>

      <Button
        color="inherit"
        startIcon={<RefreshIcon />}
        onClick={handleRefreshData}
        disabled={refreshing}
        sx={{ 
          bgcolor: 'background.paper', 
          boxShadow: 1,
          minWidth: 120
        }}
      >
        {refreshing ? 'Refreshing...' : 'Refresh'}
      </Button>
    </Box>
  </Box>
  <Card 
    elevation={0}
    sx={{ 
      mb: 3, 
      border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
      borderRadius: 2,
      overflow: 'visible'
    }}
  >
    <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
      <Tabs 
        value={activeTab} 
        onChange={(_, newValue) => setActiveTab(newValue)}
        variant={isMobile ? "scrollable" : "standard"}
        scrollButtons={isMobile ? "auto" : false}
        sx={{ px: 2, pt: 1 }}
      >
        {tabContent}
      </Tabs>
    </Box>
    
    <Box sx={{ p: { xs: 2, md: 3 } }}>
      <Box sx={{ display: 'flex', flexDirection: { xs: 'column', sm: 'row' }, alignItems: 'flex-start', gap: 2, mb: 3 }}>
        <Box sx={{ flex: 1, width: { xs: '100%', sm: 'auto' } }}>
          <Search
            placeholder="Search by name, customer, email or ID..."
            value={searchQuery}
            onChange={handleSearchChange}
            onSearch={handleSearch}
            showAdvancedSearch={true}
            onAdvancedSearch={() => handleFilterMenuOpen}
            searchHistory={searchHistory}
            onClearHistory={handleClearSearchHistory}
            onSaveSearch={handleSaveSearch}
            filters={filters}
            onFilterRemove={handleRemoveFilter}
            onFiltersClear={handleClearFilters}
          />
        </Box>
        
        <Box sx={{ display: 'flex', gap: 1 }}>
          <ActionButton 
            icon={refreshing ? <CircularProgress size={24} /> : <RefreshIcon />}
            label="Refresh Records"
            onClick={handleRefreshData}
            disabled={refreshing}
          />
          
          <ActionButton 
            icon={
              <Badge badgeContent={filters.length} color="primary" invisible={filters.length === 0}>
                <FilterListIcon />
              </Badge>
            }
            label="Filter Records"
            onClick={handleFilterMenuOpen}
          />
          
          <ActionButton 
            icon={<ExportIcon />}
            label="Export Records"
            onClick={handleExportMenuOpen}
            disabled={filteredRecords.length === 0}
          />
        </Box>
      </Box>
      
      <Menu
        anchorEl={filterAnchorEl}
        open={Boolean(filterAnchorEl)}
        onClose={handleFilterMenuClose}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'right',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'right',
        }}
      >
        <Typography variant="subtitle2" sx={{ px: 2, py: 1 }}>
          Filter by Status
        </Typography>
        
        {statusOptions.map((option) => (
          <MenuItem
            key={option.value}
            onClick={() => handleAddFilter('status', option.value)}
          >
            {option.label}
          </MenuItem>
        ))}
        
        <Divider />
        
        <Typography variant="subtitle2" sx={{ px: 2, py: 1 }}>
          Filter by Confidence
        </Typography>
        
        {confidenceOptions.map((option) => (
          <MenuItem
            key={option.value}
            onClick={() => handleAddFilter('confidence', option.value)}
          >
            {option.label}
          </MenuItem>
        ))}
        
        <Divider />
        
        <Typography variant="subtitle2" sx={{ px: 2, py: 1 }}>
          Filter by Dynpro Approval
        </Typography>
        
        {dynproApprovedOptions.map((option) => (
          <MenuItem
            key={option.value}
            onClick={() => handleAddFilter('dynproApproved', option.value)}
          >
            {option.label}
          </MenuItem>
        ))}
      </Menu>
      
      {selectedRecords.length > 0 && (
        <Fade in={selectedRecords.length > 0}>
          <Box 
            sx={{ 
              mt: 2, 
              p: 1.5, 
              bgcolor: alpha(theme.palette.primary.main, 0.05), 
              borderRadius: 2,
              border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}`,
            }}
          >
            <Stack 
              direction={{ xs: 'column', sm: 'row' }} 
              spacing={2} 
              alignItems={{ xs: 'flex-start', sm: 'center' }}
              divider={<Divider orientation="vertical" flexItem />}
            >
              <Typography variant="body2" fontWeight="medium" color="primary.main">
                {selectedRecords.length} {selectedRecords.length === 1 ? 'record' : 'records'} selected
              </Typography>
              
              <Stack direction="row" spacing={1} flexWrap="wrap">
                <Button
                  size="small"
                  startIcon={<VisibilityIcon />}
                  variant="outlined"
                  sx={{ borderRadius: '8px', textTransform: 'none' }}
                  onClick={() => {
                    // Handle batch view action
                  }}
                >
                  View
                </Button>
                
                <Button
                  size="small"
                  startIcon={<CheckCircleIcon />}
                  color="success"
                  variant="outlined"
                  sx={{ borderRadius: '8px', textTransform: 'none' }}
                  onClick={() => {
                    // Handle batch approve action
                  }}
                >
                  Approve
                </Button>
                
                <Button
                  size="small"
                  startIcon={<CancelIcon />}
                  color="error"
                  variant="outlined"
                  sx={{ borderRadius: '8px', textTransform: 'none' }}
                  onClick={() => {
                    // Handle batch reject action
                  }}
                >
                  Reject
                </Button>
                
                <Button
                  size="small"
                  startIcon={<DeleteIcon />}
                  color="error"
                  variant="outlined"
                  sx={{ borderRadius: '8px', textTransform: 'none' }}
                  onClick={() => {
                    // Handle batch delete action
                  }}
                >
                  Delete
                </Button>
              </Stack>
            </Stack>
          </Box>
        </Fade>
      )}
    </Box>
  </Card>
  
  {isLoading && (
    <Box sx={{ width: '100%', mb: 3 }}>
      <LinearProgress sx={{ height: 4, borderRadius: 2 }} />
    </Box>
  )}
  
  <Card 
    elevation={0}
    sx={{ 
      border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
      borderRadius: 2,
      overflow: 'hidden',
      display: 'flex',
      flexDirection: 'column',
      height: 'calc(100vh - 300px)', // Fixed container height for better control
    }}
  >
    <Box sx={{ 
      flex: 1, 
      position: 'relative',
      overflow: 'auto',
      minHeight: '500px', // Minimum height to ensure scrolling works
      display: 'flex',
      flexDirection: 'column',
    }}>
      <Table
        columns={columns}
        data={filteredRecords}
        keyExtractor={(row) => row.id}
        onRowClick={handleRowClick}
        showPagination={true}
        page={page}
        onPageChange={handlePageChange}
        rowsPerPage={rowsPerPage}
        onRowsPerPageChange={handleRowsPerPageChange}
        totalItems={filteredRecords.length}
        loading={isLoading}
        emptyStateMessage="No records found matching your criteria"
        sortable={true}
        selectable
        selectedRows={selectedRecords}
        onSelectRows={handleSelectRows}
        rowActions={rowActions}
        stickyHeader={true}
        maxHeight="100%" // Use 100% of the parent container
        sx={{
          height: '100%',
          display: 'flex',
          flexDirection: 'column',
          '& .MuiTableCell-head': {
            bgcolor: alpha(theme.palette.primary.main, 0.02),
            fontWeight: 600,
            position: 'sticky',
            top: 0,
            zIndex: 10,
          },
          '& .MuiTableRow-root:hover': {
            bgcolor: alpha(theme.palette.primary.main, 0.03),
          },
          '& .MuiTableRow-root.Mui-selected': {
            bgcolor: alpha(theme.palette.primary.main, 0.08),
            '&:hover': {
              bgcolor: alpha(theme.palette.primary.main, 0.12),
            }
          },
          '& .MuiTablePagination-root': {
            bgcolor: alpha(theme.palette.background.default, 0.5),
            position: 'sticky',
            bottom: 0,
            zIndex: 5,
          },
          '& .MuiTableContainer-root': {
            maxHeight: '100%', // Make table container take full height
            flex: '1 1 auto',
            overflowY: 'auto', // Ensure vertical scrolling
            scrollbarWidth: 'thin',
            '&::-webkit-scrollbar': {
              width: '8px',
              height: '8px',
            },
            '&::-webkit-scrollbar-track': {
              backgroundColor: alpha(theme.palette.divider, 0.1),
              borderRadius: '8px',
            },
            '&::-webkit-scrollbar-thumb': {
              backgroundColor: alpha(theme.palette.primary.main, 0.2),
              borderRadius: '8px',
              '&:hover': {
                backgroundColor: alpha(theme.palette.primary.main, 0.3),
              },
            },
          },
          '& .MuiTable-root': {
            borderCollapse: 'separate',
            borderSpacing: 0,
          }
        }}
      />
    </Box>
  </Card>
  
  {/* Delete Confirmation Dialog */}
  <Modal
    open={deleteDialogOpen}
    onClose={handleDeleteDialogClose}
    title="Delete Record"
    maxWidth="sm"
    showCancelButton={true}
    showConfirmButton={true}
    confirmButtonText="Delete Record"
    confirmButtonVariant="error"
    onConfirm={handleDeleteConfirm}
    cancelButtonText="Cancel"
    cancelButtonProps={{ 
      sx: { 
        borderRadius: '8px',
        textTransform: 'none',
        fontWeight: 500
      } 
    }}
    confirmButtonProps={{ 
      startIcon: <DeleteIcon />,
      sx: { 
        borderRadius: '8px',
        textTransform: 'none',
        fontWeight: 600
      } 
    }}
  >
    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 1 }}>
      <Alert severity="warning" variant="outlined" sx={{ borderRadius: 2 }}>
        <Typography variant="body2" fontWeight="medium">
          This action cannot be undone
        </Typography>
      </Alert>
      
      {selectedRecord && (
        <Box sx={{ 
          p: 2, 
          borderRadius: 2, 
          bgcolor: alpha(theme.palette.error.main, 0.05),
          border: `1px solid ${alpha(theme.palette.error.main, 0.1)}`,
          display: 'flex',
          alignItems: 'center',
          gap: 2
        }}>
          <Avatar
            sx={{
              bgcolor: alpha(theme.palette.error.main, 0.1),
              color: theme.palette.error.main,
              width: 40,
              height: 40
              flexDirection: 'column',
              '& .MuiTableCell-head': {
                bgcolor: alpha(theme.palette.primary.main, 0.02),
                fontWeight: 600,
                position: 'sticky',
                top: 0,
                zIndex: 10,
              },
              '& .MuiTableRow-root:hover': {
                bgcolor: alpha(theme.palette.primary.main, 0.03),
              },
              '& .MuiTableRow-root.Mui-selected': {
                bgcolor: alpha(theme.palette.primary.main, 0.08),
                '&:hover': {
                  bgcolor: alpha(theme.palette.primary.main, 0.12),
                }
              },
              '& .MuiTablePagination-root': {
                bgcolor: alpha(theme.palette.background.default, 0.5),
                position: 'sticky',
                bottom: 0,
                zIndex: 5,
              },
              '& .MuiTableContainer-root': {
                maxHeight: '100%', // Make table container take full height
                flex: '1 1 auto',
                overflowY: 'auto', // Ensure vertical scrolling
                scrollbarWidth: 'thin',
                '&::-webkit-scrollbar': {
                  width: '8px',
                  height: '8px',
                },
                '&::-webkit-scrollbar-track': {
                  backgroundColor: alpha(theme.palette.divider, 0.1),
                  borderRadius: '8px',
                },
                '&::-webkit-scrollbar-thumb': {
                  backgroundColor: alpha(theme.palette.primary.main, 0.2),
                  borderRadius: '8px',
                  '&:hover': {
                    backgroundColor: alpha(theme.palette.primary.main, 0.3),
                  },
                },
              },
              '& .MuiTable-root': {
                borderCollapse: 'separate',
                borderSpacing: 0,
              }
            }}
          />
      </Box>
      </Card>
      
      {/* Delete Confirmation Dialog */}
      <Modal
        open={deleteDialogOpen}
        onClose={handleDeleteDialogClose}
        title="Delete Record"
        maxWidth="sm"
        showCancelButton={true}
        showConfirmButton={true}
        confirmButtonText="Delete Record"
        confirmButtonVariant="error"
        onConfirm={handleDeleteRecord}
        cancelButtonText="Cancel"
        cancelButtonProps={{ 
          sx: { 
            borderRadius: '8px',
            textTransform: 'none',
            fontWeight: 500
          } 
        }}
        confirmButtonProps={{ 
          startIcon: <DeleteIcon />,
          sx: { 
            borderRadius: '8px',
            textTransform: 'none',
            fontWeight: 600
          } 
        }}
      >
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 1 }}>
          <Alert severity="warning" variant="outlined" sx={{ borderRadius: 2 }}>
            <Typography variant="body2" fontWeight="medium">
              This action cannot be undone
            </Typography>
          </Alert>
          
          {selectedRecord && (
            <Box sx={{ 
              p: 2, 
              borderRadius: 2, 
              bgcolor: alpha(theme.palette.error.main, 0.05),
              border: `1px solid ${alpha(theme.palette.error.main, 0.1)}`,
              display: 'flex',
              alignItems: 'center',
              gap: 2
            }}>
              <Avatar
                sx={{
                  bgcolor: alpha(theme.palette.error.main, 0.1),
                  color: theme.palette.error.main,
                  width: 40,
                  height: 40
                }}
              >
                <AssignmentIcon />
              </Avatar>
              <Box>
                <Typography variant="subtitle1" fontWeight="medium">
                  {selectedRecord.name}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  ID: {selectedRecord.id}
                </Typography>
              </Box>
            </Box>
          )}
          
          <Typography variant="body1">
            Are you sure you want to delete this record? All associated data will be permanently removed from the system.
          </Typography>
        </Box>
      </Modal>
    </Box>
  );
};

export default RecordsList;
